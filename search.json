[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/pre-commit-hook-in-python/index.html",
    "href": "posts/pre-commit-hook-in-python/index.html",
    "title": "পাইথনে প্রি-কমিট হুকের সাথে পরিচিতি(Introduction to Pre-commit Hook in Python)",
    "section": "",
    "text": "প্রি-কমিট হুকের সাথে পরিচিতি Vladimir Iglovikov এর ব্লগ Nine simple steps for better-looking python code পোস্টের মাধ্যমে। আমার কাছে খুবই ইন্টারেস্টিং কনসেপ্ট মনে হয়েছে, তাই এই ব্যাপারে একটা ব্লগ লিখা। পাইথন প্রজেক্টের ক্ষেত্রে কিভাবে আমরা pre-commit hook ব্যবহার করতে পারি, তা নিয়েই এই ব্লগ পোস্ট।"
  },
  {
    "objectID": "posts/pre-commit-hook-in-python/index.html#কন-pre-commit-hook-পরয়জন",
    "href": "posts/pre-commit-hook-in-python/index.html#কন-pre-commit-hook-পরয়জন",
    "title": "পাইথনে প্রি-কমিট হুকের সাথে পরিচিতি(Introduction to Pre-commit Hook in Python)",
    "section": "কেন pre-commit hook প্রয়োজন",
    "text": "কেন pre-commit hook প্রয়োজন\nআমরা যখন একটা প্রজেক্টে কাজ করি- তখন সেখানে কয়েকজন ডেভলপার থাকে, একজন অন্যজনের কোড রিভিউ করে। পুল-রিকুয়েস্ট রিভিউ করার সময় আমাদের মূল ফোকাস যেন কোডের লজিক, ডিজাইন ইত্যাদি গুরুত্ব পূর্ণ বিষয়গুলোতে বেশি থাকে। আমার কলিগের পুল-রিকুয়েস্ট যেন একটা এক্সট্রা স্পেস কিংবা এক্সট্রা নিউ লাইনের জন্য ঝুলে না থাকে। ল্যাঙ্গুয়েজ স্পেসিফিক বেস্ট প্র্যাকটিস যেন আমরা আরেকটা টুলসের মাধ্যমে নিশ্চিত করতে পারি।\nতাছাড়া ডেভলপাররাও বিভিন্ন সময় ভুল করে- সেই ভুল হতে পারে ডেভলপমেন্ট/মাস্টার ব্রাঞ্চে ভুল করে কমিট করা, কোন একটা লার্জ ফাইল গিট ইগ্নোর না করায় তা কমিট হয়ে যাওয়া, গিট পুশ করার আগে ইউনিট টেস্টগুলো সব পাস হচ্ছে নাকি তা চেক না করেই পুল-রিকুয়েস্ট ক্রিয়েট করে ফেলা।\nএইসব বিভিন্ন ধরনের চেকিং আমরা চাইলে আমাদের কমিট করার আগে করতে পারি। সেটার জন্যই আমরা আজকে একটা পাইথন প্রজেক্টে pre-commit hook কিভাবে ব্যবহার করতে হয় তা দেখবো।"
  },
  {
    "objectID": "posts/pre-commit-hook-in-python/index.html#pre-commit-পযকজ-ইনসটলশন",
    "href": "posts/pre-commit-hook-in-python/index.html#pre-commit-পযকজ-ইনসটলশন",
    "title": "পাইথনে প্রি-কমিট হুকের সাথে পরিচিতি(Introduction to Pre-commit Hook in Python)",
    "section": "pre-commit প্যাকেজ ইন্সটলেশন",
    "text": "pre-commit প্যাকেজ ইন্সটলেশন\nআমাদের প্রজেক্টে প্রথমে pre-commit পাইথন প্যাকেজ ইন্সটল করতে হবে, এবং এই প্যাকেজ ব্যবহার করে আমরা pre-commit ও pre-push - git hooks ইন্সটল করবো।\npip install pre-commit\npre-commit install --hook-type pre-commit --hook-type pre-push\nএই pre-commit প্যাকেজকে আমরা requirements.dev.text তেও এড করে দিবো, কারণ এই প্যাকেজটা শুধু ডেভলপমেন্টের সময় লাগবে।"
  },
  {
    "objectID": "posts/pre-commit-hook-in-python/index.html#pre-commit-config.yaml--এর-মধযম-কনফগরশন",
    "href": "posts/pre-commit-hook-in-python/index.html#pre-commit-config.yaml--এর-মধযম-কনফগরশন",
    "title": "পাইথনে প্রি-কমিট হুকের সাথে পরিচিতি(Introduction to Pre-commit Hook in Python)",
    "section": ".pre-commit-config.yaml -এর মাধ্যমে কনফিগারেশন",
    "text": ".pre-commit-config.yaml -এর মাধ্যমে কনফিগারেশন\nএখন আসি, কিভাবে আমাদের pre-commit hook কে কনফিগার করবো। .pre-commit-config.yaml ফাইলে আমরা আমাদের প্রয়োজন অনুযায়ী কনফিগারশন করবো, আর সেটিকে প্রজেক্ট রুটে রাখবো। নিম্নে আমার একটা টয় প্রজেক্টের .pre-commit-config.yaml ফাইল দেয়া হলো -\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.4.0\n    hooks:\n    - id: trailing-whitespace\n    - id: check-added-large-files\n    - id: no-commit-to-branch\n    - id: check-yaml      \n  - repo: https://gitlab.com/pycqa/flake8\n    rev: 3.8.4\n    hooks:\n    - id: flake8    \n      stages: [commit]\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v0.812\n    hooks:\n    - id: mypy\n      additional_dependencies: [tokenize-rt==3.2.0]\n      stages: [commit]\n  - repo: local\n    hooks:\n    - id: tests\n      name: run tests\n      entry: pytest -v\n      language: system\n      always_run: true\n      types: [python]\n      stages: [push]\n\npre-commit-hooks\nপ্রথম যে রিপোটা আমরা ব্যবহার করছি তা হলো pre-commit-hooks, এ আমাদেরকে বেশকিছু চেকিং এবং ফিক্সিং আউট-অফ-দা-বক্স সাপোর্ট দেয়। যেমন, আমাদের ফাইলে খেয়াল করলে hooks এর নিচে দেখতে পাচ্ছি প্রথম id হলো trailing-whitespace , যেটা আমার কোডের প্রতি লাইনের শেষের এক্সট্রা স্পেসগুলি রিমুভ করে দিবে এবং সেক্ষেত্রে আপনার কমিট ফেইল করবে। আমাদেরকে তখন নতুন করে স্পেসিফিক ফাইলকে স্টেজ করে কমিট করতে হবে, কারণ প্রয়োজনীয় চেঞ্জ আমাকে করে দিয়েছি এই hook । এরপরের আইডি হলো- check-added-large-files, এর ডিফল্ট ভ্যালু ৫০০ KB দেয়া। এর চেয়ে বড় ফাইল আপনি কমিট করতে চাইলে, সেটা এই চেকিং এ ধরা পড়বে এবং আপনি কমিট করতে পারবেন না। no-commit-to-branch এটা দিয়ে আমি নিশ্চিত করতে পারবো কেউ যেন সরাসরি মাস্টার ব্রাঞ্চে কমিট করতে না পারে(আর্গুমেন্ট দিয়ে আমরা অন্য ব্রাঞ্চও কনফিগার করতে পারবো।), check-yaml আইডি দিয়ে আমরা yaml ফাইলের ফরম্যাটিং চেক করতে পারবো। আরও জানার জন্য গিটহাব রিপো দেখুন - pre-commit-hooks\n\n\nflake8\nএরপরে পাইথনে স্টাইল গাইড ফলো করার জন্য আমরা flake8 রিপো ব্যবহার করবো, যে পাইথন ফাইলগুলো আমি কমিট করতে চাচ্ছি সেগুলো সকল স্টাইলিং গাইড মেইনটেইন করছে কি-না, না করলে কোন ফাইলের কোথায় ইস্যু সেটা বলে দিবে। আর এখানে আমরা stages এ বলে দিচ্ছি - commit, যেন শুধু git commit এর সময়ই এই চেকিং টা হয়। flake8 সম্পর্কে জানার জন্য তাদের গিটহাব রিপো দেখুন - flake8 - Github\n\n\nmypy\nতৃতীয়ত আসছে mypy, পাইথনের টাইপ চেকিং এর জন্য। এই প্যাকেজের নিজস্ব কোন ডিপেন্ডেন্সি থাকলে সেটাও আমরা উল্লেখ করে দিতে পারি additional_dependencies এর মাধ্যমে। mypy সম্পর্কে জানার জন্য তাদের ডকুমেন্টেশন পেজ দেখুন - Mypy Introduction\n\n\ntests\nসর্বশেষে আসছে, ইউনিট টেস্ট রান করা। আমি আমার ইউনিট টেস্ট রান করতে চাই git push করার সময়ে, সে জন্য এখানে আমার stages এ শুধু push বলা আছে। আর pytest এর মাধ্যমে আমার টেস্ট রান করতে বলছি entry তে। always_run ব্যবহার করে আমরা বলে দিচ্ছি যেন সবসময় push করার আগে টেস্ট ফাইলগুলো রান করে।\n\n\nউদাহরণ\nআমি আমার প্রজেক্টের requirements.txt থেকে একটা প্যাকেজ রিমুভ করে দিয়ে, একটা কমিট করি। যেহেতু এটা পাইথন ফাইল না, পাইথন স্পেসিফিক হুকগুলো এখানে রান করে নি। \nপরবর্তীতে আমি এই চেঞ্জ যখন push করি তখন কমিট স্পেসিফিক চেকিং গুলো হয় নি, আর push এর সময় টেস্ট রান করতে বলেছিলাম সেই টেস্ট রান হয়েছে।"
  },
  {
    "objectID": "posts/pre-commit-hook-in-python/index.html#ci-পইপলইন-পর-কমট-হক-চক",
    "href": "posts/pre-commit-hook-in-python/index.html#ci-পইপলইন-পর-কমট-হক-চক",
    "title": "পাইথনে প্রি-কমিট হুকের সাথে পরিচিতি(Introduction to Pre-commit Hook in Python)",
    "section": "CI পাইপলাইনে প্রি-কমিট হুক চেকিং",
    "text": "CI পাইপলাইনে প্রি-কমিট হুক চেকিং\n\nBitbucket Pipeline Example\nBitbucket পাইপলাইনে মাল্টিপল স্টেপ প্যারালালি রান করা যায়। এর ফলে CI রান করার ওয়েটিং টাইমটা কমিয়ে ফেলা যায়।\nimage: python:3.8\n\ndefinitions:\n  steps:\n    - step: &coverage\n        name: Running Test\n        size: 2x\n        caches:\n          - pip        \n        script:          \n          - pip install -r requirements.dev.txt\n          - pytest\n\n    - step: &pre_commit\n        name: Pre-Commit Hook Checking\n        caches:\n          - pip        \n        script:\n          - pip install pre-commit==2.17.0\n          - pre-commit run --all-files\n\npipelines:\n  branches:\n    development:\n      - parallel:\n        - step: *coverage\n        - step: *pre_commit\n\n  pull-requests:\n    '**':\n      - parallel:\n        - step: *coverage\n        - step: *pre_commit\n\n\nGithub Action Pipeline Example:\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - development\n\n  pull_request:\n    branches:\n      - \"**\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          make dev_setup\n\n      - name: Test with pytest\n        run: |\n          make test\n\n      - name: Pre-Commit Hook Checking\n        run: |\n          pre-commit run --all-files"
  },
  {
    "objectID": "posts/pre-commit-hook-in-python/index.html#resources",
    "href": "posts/pre-commit-hook-in-python/index.html#resources",
    "title": "পাইথনে প্রি-কমিট হুকের সাথে পরিচিতি(Introduction to Pre-commit Hook in Python)",
    "section": "Resources",
    "text": "Resources\n\nAutomate Python workflow using pre-commits: black and flake8\npre-commit-hooks\nSupported hooks\nCustomizing Git - Git Hooks\npre-commit\nMy unpopular opinion about black code formatter\n[Bitbucket] Set up or run parallel steps"
  },
  {
    "objectID": "posts/pre-commit-hook-in-python/index.html#update-log",
    "href": "posts/pre-commit-hook-in-python/index.html#update-log",
    "title": "পাইথনে প্রি-কমিট হুকের সাথে পরিচিতি(Introduction to Pre-commit Hook in Python)",
    "section": "UPDATE Log",
    "text": "UPDATE Log\n[27th January, 2022] Add CI pipeline example for Bitbucket and Github Action."
  },
  {
    "objectID": "posts/multi-stage-docker-build/index.html",
    "href": "posts/multi-stage-docker-build/index.html",
    "title": "Multi-stage Docker Build for Python Application",
    "section": "",
    "text": "Recently, I have started learning about Docker multi-stage build which can help to reduce docker image size. I have seen its use in multiple GitHub projects and blog posts. So, I tried to understand it and create a version of my own to use later in my projects.\nAnother thing, I have started using poetry, a python packaging and dependency management tool for my python projects. Before using poetry, I was maintaining requirements.txt files for dependency management.\nIn this blog post, I will be presenting an approach for reducing image size with Docker multi-stage build while using poetry.\nHigh-Level Project structure: This is a FastAPI-based application."
  },
  {
    "objectID": "posts/multi-stage-docker-build/index.html#working-with-plain-dockerfile",
    "href": "posts/multi-stage-docker-build/index.html#working-with-plain-dockerfile",
    "title": "Multi-stage Docker Build for Python Application",
    "section": "Working with Plain Dockerfile",
    "text": "Working with Plain Dockerfile\nFirst, starting with a plain dockerfile, which we would normally write for deployment.\nFROM python:3.10.4-slim-buster\n\nARG POETRY_VERSION=\"1.1.13\" \\\n    WORK_APP_DIR=\"/app\" \\\n    APP_PORT=8080 \n\nENV PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    POETRY_NO_INTERACTION=1 \\\n    POETRY_HOME=\"/opt/poetry\" \\\n    POETRY_VERSION=$POETRY_VERSION \\\n    PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1    \n\n# for poetry command to work\nENV PATH=\"$POETRY_HOME/bin:$PATH\"\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\n# installing poetry\nRUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -\n\nWORKDIR $WORK_APP_DIR\n\nCOPY pyproject.toml poetry.lock ./\n\n# installing python packages\nRUN poetry export -f requirements.txt --without-hashes --output requirements.txt \\\n    && pip install --no-cache-dir -r requirements.txt\n\nCOPY . ./\n\nEXPOSE $APP_PORT\n\nCMD [ \"make\", \"server\" ]\nEven, this format of dockerfile is new for me. Using different python flags, pip flags and poetry configuration through environment variables. As I am maintaining package dependencies through poetry, I am installing it first and exporting the dependencies as requirements.txt for installation. I could use poetry for installation as well, but as I will be working inside an isolated environment I won’t need another virtual environment which is used by poetry.\n--no-cache-dir for pip installation can also help to reduce image size, as it will avoid caching files for the future which is not necessary for docker image building.\nThis version of Dockerfile generates an image of size 581 mb."
  },
  {
    "objectID": "posts/multi-stage-docker-build/index.html#working-with-docker-multi-stage-build",
    "href": "posts/multi-stage-docker-build/index.html#working-with-docker-multi-stage-build",
    "title": "Multi-stage Docker Build for Python Application",
    "section": "Working with Docker Multi-Stage Build",
    "text": "Working with Docker Multi-Stage Build\nNow, let’s use multi-stage build to optimize the docker image.\n# Image for package building\nFROM python:3.10.4-slim-buster AS builder\n\nARG POETRY_VERSION=\"1.1.13\" \\\n    WORK_APP_DIR=\"/app\"\n\nENV PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    POETRY_NO_INTERACTION=1 \\\n    POETRY_HOME=\"/opt/poetry\" \\\n    POETRY_VERSION=$POETRY_VERSION\n\n# for poetry command to work\nENV PATH=\"$POETRY_HOME/bin:$PATH\"\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# installing poetry\nRUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -\n\nWORKDIR $WORK_APP_DIR\n\nCOPY pyproject.toml poetry.lock ./\n\n# creating wheel for python packages\nRUN poetry export -f requirements.txt --without-hashes --output requirements.txt \\\n    && pip wheel --no-cache-dir --wheel-dir $WORK_APP_DIR/wheels -r requirements.txt\n\n\n# Image for deployment\nFROM python:3.10.4-slim-buster\n\nARG APP_PORT=8080 \\\n    WORK_APP_DIR=\"/app\"\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    PIP_DISABLE_PIP_VERSION_CHECK=on\n\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR $WORK_APP_DIR\n\nCOPY --from=builder $WORK_APP_DIR/wheels /wheels\n\n# installing python packages\nRUN pip install --no-cache-dir  /wheels/*\n\nCOPY . ./\n\nEXPOSE $APP_PORT\n\nCMD [ \"make\", \"server\" ]\nThis dockerfile will yeild a docker image of size 391 mb. As we got rid of the unnecessary files in final stage, it results a smaller image size. In the initial stage we download and build the wheels of our python packages. And this wheels are saved under a directory and can be used in the successive stages. Some files are necessary for building/compiling, but not for runtime. Getting rid of such files can save some space. We just imported the buit wheels in our final stage. We also didn’t use curl, poetry in our final stage as we won’t be needing those anymore."
  },
  {
    "objectID": "posts/multi-stage-docker-build/index.html#conclusion",
    "href": "posts/multi-stage-docker-build/index.html#conclusion",
    "title": "Multi-stage Docker Build for Python Application",
    "section": "Conclusion",
    "text": "Conclusion\nUsing slimmer base image can also help to reduce docker image size for python applications, but as I mostly work ML project which has many dependencies, python slim-buster image helps a bit to avoid manul installation of some packages. This is not the most optimized dockerfile out there, this will work and can be modified for better performance. I will try to update this as I learn something new."
  },
  {
    "objectID": "posts/multi-stage-docker-build/index.html#references",
    "href": "posts/multi-stage-docker-build/index.html#references",
    "title": "Multi-stage Docker Build for Python Application",
    "section": "References",
    "text": "References\n\nUse multi-stage builds\nDocument docker poetry best practices #1879\npython-poetry-docker-example\nPython Poetry for Building Docker Images\nPython and Poetry on Docker"
  },
  {
    "objectID": "posts/my-cp-journey/index.html",
    "href": "posts/my-cp-journey/index.html",
    "title": "কম্পিটিটিভ প্রোগ্রামিং -এ আমার পদার্পণ",
    "section": "",
    "text": "ব্র্যাকে ভর্তি হয়ে বেশ কিছুদিন(কয়েক মাস,এখনও কিছু সময়ের জন্য সত্য) ধরে প্রচন্ড রকমের মন খারাপ। কোন একদিন ফেসবুকে ব্র্যাকে ভার্সিটি রিলেটেড সব গ্রুপে জয়েনে রিকুয়েস্ট করি। সেভাবেই এই গ্রুপের সন্ধান পাওয়া।\nবিভিন্ন মানুষের লিখা পড়ার কারণে কন্টেস্ট সম্পর্কে ভাসা ভাসা আইডিয়া ছিল। কিন্তু ভার্সিটিতে ভর্তি হয়েই programming language সহ বিভিন্ন টার্মের সাথে প্রথম পরিচয়। spring15 এর সেমিস্টার ব্রেকের কিছু আগে ঢাবির এক বন্ধুর(নাবিল) মাধ্যমে uri online judge এর খবর পাই। সলভ করতে গিয়ে প্রথম প্রবলেম সাবমিট করেই WA (uri 1001 may be)। এই গ্রুপে (BRACU Programming Contest Enthusiasts)পোস্ট করলাম, আপু উত্তর দিলো “Please , enter a number” প্রিন্ট করার কোন দরকার নেই । কেবল শুরু ……\nরকিব স্যার থাকাকালীন ক্লাস শুরু করা সম্ভব হয় নি। পরের সেমিস্টারে টার্কে চলে গেলাম। টার্ক থেকে ফিরে জয়েন করবো করবো করে ভয়ে আর করা হলো না। টার্কে কাওনাইন স্যার , রুবায়েত স্যার ,সামিউল স্যার প্রতি শনিবার যেতো। তখন uri এর প্রবলেম সলভ করতাম, সাহায্য নিতাম।\nপরের সেমিস্টারেও টুকটাক সলভ করতাম/চেষ্টা করতাম, ডিসেম্বরে ফাইনালি জয়েন করলাম। এর আগে একটা কথা বলি একদিন রাতে ঘুমানোর আগে uva এর 3n+1 বিখ্যাত প্রবলেম (এই সাইটের নামও ঐ বন্ধুর কাছ থেকে পাওয়া। ও তখন এটায় সলভ করে) বহু চিন্তা করে লজিক ঠিক করি। পরের দিন ভোরে উঠে কোড করতে বসি, উত্তর মিলাই। টানা ৭/৮ বারের মতো সাবমিট করে প্রতিবারই WA(Wrong Answer) খাই। উত্তর ঠিকই প্রিন্ট করতেছে কিন্তু wa কেন?\nআবার ক্লাসে ফিরে আসি। প্রথমদিন ক্লাসে ২/৩ টা প্রবলেম সলভ করার জন্য বলা হইছিল আমি ১ টা মনে হয় সলভ করতে পারছিলাম। লজ্জায় তাড়াতাড়ি বের হতে চাচ্ছিলাম। আর ঐদিনই জানি আমার ঐ প্রবলেম wa খাওয়ার কারণ ছিল আমি end of file পর্যন্ত ইনপুট নেই নাই। কারণ ঐ জিনিস সম্পর্কে আমার কোন আইডিয়া ছিল না।\nপ্রথম কন্টেস্ট করতে বসে ২/৩ টা সলভ করতে পারছিলাম ১০ টার মধ্যে। আর প্রথম যারা ছিল তারা ২/৩ ঘন্টার মধ্যেই সব সলভ করে ফেলছে। ঐ রাতেই তাদের জন্য আরেকটা কন্টেস্ট সেট করে দেয়া হতো। তারা যেন প্র্যাকটিস চালু রাখতে পারে। আমি অসহায়ের মতো ঐ কন্টেস্টে গিয়ে আরো ২/৩ টা সলভ করে আসতাম।\nআমার uva তে তখন সলিউশন ৪/৫ টা আর প্রথম কয়েকজনের ১৪৫+। আমি সি++ স্ট্রিং নিয়ে অনেক ভুগছি , পরে শিখছি। আমি ক্লাসে সব জিনিস ধরতে পারতাম না, এইটা আজ অবধি সত্য কিন্তু পরে বাসায় এসে ঘেটে দেখে শিখে নিতাম/চেষ্টা করতাম, এখনো তাই করি। একাডেমিক কোর্সের ক্ষেত্রেও তা সত্য।\nআমার ৩/৪ নাম্বার ক্লাসেই রাজকিন ভাইয়া BFS, DFS, Trie, Heap শিখাইছিল। কন্সেপ্ট ধরতে পারছি কিন্তু কোডের কিছুই বুঝি নাই । কিন্তু আমি ছাড়ি নাই।\nআমি হুমায়ুন আহমেদের বই পড়া মানুষ তা ছাড়া বহু মানুষের কথা শুনছি এবং লিখা পড়ছি। “কচ্ছপের মতো কামড় দিয়ে” ধরে থাকতে পারি। হেরে যাওয়ার আগে হারতে রাজী না কিংবা বিলীন হতে রাজী না। আমি স্লো লার্নার কিন্তু লার্নার।\nআমি এই শিখার এবং পার্টিসিপেট করার জার্নিটাকে ইঞ্জয় করছি। আমার বলার মতো কিংবা “সিভি” তে এড করার মতো কোন র‍্যাংক নাই, হবে নাকি জানিও না।\nএতোগুলা কথা বলার কারণ ৪ দিনের workshop(BRACU Competitive Programming Workshop, April-May 2017) এ প্রতিদিন মানুষ কমছে যেটা এক্সপেক্টেড ছিল। চেষ্টা না করেই পারবো না বলাটা ঠিক মানানসই না। কেউ কোনকিছুতে ইন্টারেস্টেড ফিল না করলে ভিন্ন কথা। কিন্তু ইন্টারেস্টেড হয়েও নিজের উপর ভরসা না পাওয়াটা সমস্যা। ১/২ মাস চেষ্টা করো , এরপর যদি মনে হয় যে সম্ভব না তাহলে QUIT করো (Wasif ভাইয়া এই কথাটা বলছিল)। কচ্ছপের মতো শুধু পরে থাকাতে আবার সার্থকতা নেই। একটু একটু করে আগাতেও হবে সাথে।\nHappy Coding :)\n[ লিখাটা যতোটা না অন্যের জন্য তার চেয়ে বেশি নিজের জন্য ]"
  },
  {
    "objectID": "posts/strategy-pattern/index.html",
    "href": "posts/strategy-pattern/index.html",
    "title": "স্ট্র্যাটিজি প্যাটার্ন (Strategy Pattern)",
    "section": "",
    "text": "ডিজাইন প্যাটার্নের গুরুত্ব আমরা সকলেই কমবেশি জানি। সফটওয়্যার ডেভলপমেন্টের ক্ষেত্রে ডিজাইন প্যাটার্নগুলো জানা থাকলে আমাদের বিভিন্ন প্রবলেম সঠিক ডিজাইন মেইনটেইন করে সলভ করা সহজ হয়ে যাবে। এই ব্লগ পোস্টে আমরা এরই লক্ষ্যে “স্ট্র্যাটেজি প্যাটার্ন” সম্পর্কে জানতে চেষ্টা করবো।\nপ্রথমে naive এপ্রোচে একটা সলিউশন দাঁড় করানোর চেষ্টা করবো। পরবর্তীতে স্ট্র্যাটেজি প্যাটার্নকে ব্যবহার করে কিভাবে আমরা সেটাকে আরও ভালোভাবে ডিজাইন করতে পারি সেটা দেখবো।"
  },
  {
    "objectID": "posts/strategy-pattern/index.html#পরবলম",
    "href": "posts/strategy-pattern/index.html#পরবলম",
    "title": "স্ট্র্যাটিজি প্যাটার্ন (Strategy Pattern)",
    "section": "প্রবলেম",
    "text": "প্রবলেম\nআমরা ছোট একটা ভিডিও গেমের কথা চিন্তা করি - ক্রিকেটের একটা গেম হবে, যেখানে বিভিন্ন দেশের বিভিন্ন খেলোয়াড় থাকবে। এখন এই খেলোয়াড়দের কথা মাথায় রেখে আসুন আমরা কিছু ক্লাস ডিজাইন করি।"
  },
  {
    "objectID": "posts/strategy-pattern/index.html#সমধন",
    "href": "posts/strategy-pattern/index.html#সমধন",
    "title": "স্ট্র্যাটিজি প্যাটার্ন (Strategy Pattern)",
    "section": "সমাধান",
    "text": "সমাধান\n\n➡️ সাধারণ পন্থায়\nপ্রথমে OOP এর কনসেপ্ট ধরে যদি চিন্তা করি - আমরা Player নামের একটা ইন্টার্ফেস তৈরি করতে পারি। যার bat() এবং bowl() নামের দুইটা মেথডকে ইমপ্লিমেন্ট করতে হবে। Player ক্লাসটা সেক্ষেত্রে নিম্নরূপ হবে 👇\n(#️⃣ এখানে একটু বলে রাখা ভালো, পাইথনের ইন্টার্ফেস তৈরি পদ্ধতি অন্য স্ট্যাটিক টাইপড ল্যাঙ্গুয়েজ থেকে বেশ আলাদা। )\nfrom abc import ABC, abstractmethod\n\n\nclass Player(ABC):\n    def __init__(self, name: str, country: str):\n        self.name = name\n        self.country = country    \n\n    @abstractmethod\n    def bat(self) -> None:\n        raise NotImplementedError\n\n    @abstractmethod\n    def bowl(self) -> None:\n        raise NotImplementedError\n\n    def __str__(self) -> str:\n        return f\"My name is {self.name}. I'm from {self.country}.\"\nএখন এই Player ইন্টার্ফেসকে ব্যবহার করে আমি আমাদের ওপেনার তামিম ইকবাল খান-এর একটা ক্লাস যদি তৈরি করতে চাই। সেই ক্লাসটি হবে নিম্নরূপ 👇\nclass Tamim(Player):    \n    def __init__(self, name: str, country: str):\n        super().__init__(name, country)        \n\n    def bat(self) -> None:\n        \"\"\"Implementation of Tamim's batting.\"\"\"\n\n    def bowl(self) -> None:\n        \"\"\"Implementation of Tamim's bowling.\"\"\"\nএকজন ওপেনিং ব্যাটসম্যানের পরে এখন আমরা একজন বোলার, মুস্তাফিজুর রহমানের ক্লাস অনুরূপভাবে তৈরি করতে পারি।\nclass Mustafizur(Player):    \n    def __init__(self, name: str, country: str):\n        super().__init__(name, country)        \n\n    def bat(self) -> None:\n        \"\"\"Implementation for Mustafizur's batting.\"\"\"\n\n    def bowl(self) -> None:\n        \"\"\"Implementation for Mustafizur's bowling.\"\"\"\nএইক্ষেত্রে আমরা যদি তামিম এবং মুস্তাফিজুরের অব্জেক্ট তৈরি করতে চাই, তা খুব সহজেই আমরা করতে পারবো নিম্নোক্তভাবে 👇\nTamim = Tamim(name=\"Tamim Iqbal\", country=\"Bangladesh\")\nMustafizur = Mustafizur(name=\"Mustafizur Rahman\", country=\"Bangladesh\")\nআপাত দৃষ্টিতে সব ঠিক মনে হচ্ছে। তামিমের জন্য আলাদা একটা ক্লাস ডিজাইন করে নিয়েছি, মুস্তাফিজের জন্যও আলাদা ক্লাস করে নিয়েছি।\nএখন আমরা যদি বাংলাদেশ জাতীয় দলের অন্যান্য খেলোয়াড়দের ক্লাস তৈরি করতে চাই? এরপর ভারতের খেলোয়াড়দের?\nপ্রত্যেক খেলোয়াড়ের জন্যই তাহলে আমাকে আলাদা করে একটা ক্লাস তৈরি করতে হবে এবং সেই ক্লাসে bat() ও bowl() দুইটা মেথডকে প্রতিবার ইমপ্লিমেন্টও করতে হবে। এখন যদি একটু খেয়াল করি- তামিম, সাকিব, সৌম্য এরা প্রত্যেকেই বামহাতি ব্যাটসম্যান। সুতরাং, প্রত্যেক বামহাতি প্লেয়ারের জন্যও আমি বারবার bat() মেথড একইভাবে ইমপ্লিমেন্ট করছি। এবার মুস্তাফিজ বামহাতি ব্যাটসম্যান হলেও তাকে আমরা ঠিক ব্যাটসম্যান ক্যাটাগরিতে ফেলবো না। তার ক্ষেত্রে ব্যাটিং করার ইমপ্লিমেন্টেশন আলাদা হওয়া উচিত।\nআমাদের বর্তমান ডিজাইন অনুযায়ী ব্যাটিং, বোলিং এর ইমপ্লিমেন্টেশন একেকটা ক্লাসের অর্থাৎ একেকজন খেলোয়াড়ের সাথে কাপল্ড(coupled) হয়ে যাচ্ছে, যাকে পরবর্তীতে আমরা পুনর্বার ব্যবহারও করতে পারছি না।\n\n\n➡️ Strategy Pattern ব্যবহারের মাধ্যমে\nসামনে যাওয়ার পূর্বে আমাদেরকে দুটো কন্সেপ্টের সাথে পরিচিত থাকতে হবে। কনসেপ্টগুলো হলো -\n1️⃣ Composition over Inheritence\n2️⃣ Dependency injection\nএগুলোর সাহায্য নিয়ে আমরা Strategy Pattern প্রয়োগ করে উপরের সমস্যাগুলো থেকে মুক্তি পেতে পারি।\nআমরা এখন IBattingStyle ও IBowlingStyle এ দু’টো নতুন ইন্টার্ফেস নিয়ে আসছি। এই ইন্টার্ফেসগুলো ব্যবহার করে আমরা আমাদের পুর্বের Player ক্লাসকে নতুন করে ডিফাইন করবো।\nfrom abc import ABC, abstractmethod\n\nclass IBattingStyle(ABC):\n    @abstractmethod\n    def bat(self) -> None:\n        raise NotImplementedError\n\nclass IBowlingStyle(ABC):\n    @abstractmethod\n    def bowl(self) -> None:\n        raise NotImplementedError\nএখন আমরা আমাদের নতুন Player ক্লাসটা যদি লক্ষ্য করি 👇\nclass Player:\n    def __init__(self, name: str, \n                       country: str,\n                       batting_style: IBattingStyle,\n                       bowling_style: IBowlingStyle):\n        self.name = name\n        self.country = country\n        self.batting_style = batting_style\n        self.bowling_style = bowling_style\n\n    def bat(self) -> None:\n        self.batting_style.bat()\n\n    def bowl(self) -> None:\n        self.bowling_style.bowl()\n\n    def __str__(self) -> str:\n        return f\"My name is {self.name}. I'm from {self.country}.\"\nPlayer ক্লাসটার কাজ বদলায় নি, কিন্তু চেহারা বদলে গেছে। আমাদের ক্লাস এখন __init__ এ দু’টোর বদলে মোট ৪ টা আর্গুমেন্ট এক্সপেক্ট করছে। এখানে আমরা প্রতিটা খেলোয়াড়ের ব্যাটিং স্টাইল, বোলিং স্টাইল সেই খেলোয়াড়ের অব্জেক্ট তৈরি করার সময় দিয়ে দিতে পারবো। আর Player ক্লাসের bat() ও bowl() মেথড যাদের পুর্বে ইমপ্লিমেন্ট করতে হতো, এখন সেই মেথডগুলো শুধু batting_style ও bowling_style অবজেক্টের ইমপ্লিমেন্টেড মেথডকে কল করবে । এখানে Player ক্লাসকে কোন নির্দিষ্ট ব্যাটিং, বোলিং স্টাইলের ইমপ্লিমেন্টেশনের বিস্তারিত জানতে হচ্ছে না। শুধু নির্দিষ্ট একটা কাজ করার জন্য ইন্টার্ফেসের কোন মেথডকে কল করতে হবে, সেটা জানলেই হচ্ছে।\nIBattingStyle, IBowlingStyle এর কি ধরনের ইমপ্লিমেন্টেশন হতে পারে যদি একটু দেখে নিই, তাহলে আমাদের পুরো জিনিসটা বুঝতে হয়তো আরেকটু সুবিধা হবে।\nImplementations of IBattingStyle\nclass LeftHandBatting(IBattingStyle):\n    def bat(self) -> None:\n        \"\"\"Implementation for Left-hand Batting.\"\"\"\n\nclass RightHandBatting(IBattingStyle):\n    def bat(self) -> None:\n        \"\"\"Implementation for Right-hand Batting.\"\"\"\nএখানে 👆 আমাদের প্রয়োজন হলে LeftHandAggresiveBatting একটা ইমপ্লিমেন্টেশনও যোগ করতে পারি।\nImplementations of IBowlingStyle\nclass LeftHandFastBowling(IBowlingStyle):\n    def bowl(self) -> None:\n        \"\"\"Implementation for Left-hand fast bowler.\"\"\"\n\nclass RightHandFastBowling(IBowlingStyle):\n    def bowl(self) -> None:\n        \"\"\"Implementation for Right-hand fast bowler.\"\"\"\nআর 👆 এখানে তো আমাদের অবশ্যই LeftArmOffBreakBowling, RightArmOffBreakBowling ইমপ্লিমেন্টেশনগুলোর কথা চিন্তা করতেই হবে।\nআমরা পুর্বে যে তামিম, মুস্তাফিজুরের অবজেক্ট তৈরি করেছিলাম, তা বর্তমান ডিজাইনের সাপেক্ষে কেমন হবে তা দেখে নেয়া যাক 👇\n# For the sake of the example, assume Tamim is Left-hand fast bowler.\nTamim = Player(name=\"Tamim Iqbal\", \n            country=\"Bangladesh\",\n            batting_style=LeftHandBatting(),\n            bowling_style=LeftHandFastBowling())\n\nMustafizur = Player(name=\"Mustafizur Rahman\", \n                country=\"Bangladesh\", \n                batting_style=LeftHandBatting(), \n                bowling_style=LeftHandFastBowling())\nএখন আমরা চাইলেই খুব সহজে সাকিব আল হাসান, বিরাট কোহলির মতও খেলোয়াড়দের অবজেক্ট তৈরি করে ফেলতে পারবো। যার জন্য Player ক্লাসে কোন ধরনের পরিবর্তন আসবে না। বিরাট কোহলি এর জন্য শুধু নতুন RightHandMediumFastBowling এর ইমপ্লিমেন্টেশন লাগবে আমাদের, আর RightHandBatting এর ইমপ্লিমেন্টেশন আমাদের কাছে ইতিমধ্যেই আছে। এরপর শুধু অবজেক্ট তৈরি করার সময় তার নাম, দেশের নাম দিয়ে দিলেই হয়ে যাবে।\nঅনুশীলনের জন্য আপনি আরও কিছু খেলোয়াড়ের অবজেক্ট তৈরি করার কথা চিন্তা করতে পারেন। কিভাবে করবেন, আর তাদের জন্য কি লাগতে পারে।\nএই যে আমরা আমাদের প্লেয়ারদের ব্যাটিং, বোলিং করার ধরনকে আলাদা রাখছি এবং তা রানটাইমে বলে দিচ্ছি - এর মাধ্যমেই আমরা Strategy Design Pattern-কে ফলো করছি। এখন যদি Strategy Design Pattern এর কিতাবি সংজ্ঞা দেখে নিই\n\nThe Strategy Pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.\n\nএই সংজ্ঞা এর সাথে আমাদের উপরের উদাহরণটা মিলিয়ে নিলেই বুঝতে পারবেন আমরা কিভাবে Strategy Design Pattern কে ফলো করেছি। ডিজাইন প্যাটার্নের ৩ টি ধরন আছে, এই Strategy Design Pattern তার মধ্যে Behavioral Patterns এর মধ্যে পড়ে।"
  },
  {
    "objectID": "posts/strategy-pattern/index.html#references",
    "href": "posts/strategy-pattern/index.html#references",
    "title": "স্ট্র্যাটিজি প্যাটার্ন (Strategy Pattern)",
    "section": "References",
    "text": "References\n\nRefactoringGuru: Strategy Pattern\nKeep it Simple with the Strategy Design Pattern\nHead First Design Patterns\nPython Dependency Injection"
  },
  {
    "objectID": "posts/classification-evaluation-matrices-part-1/index.html",
    "href": "posts/classification-evaluation-matrices-part-1/index.html",
    "title": "ক্লাসিফিকেশন ইভ্যালুয়েশন মেট্রিসেস(Classification evaluation matrices) [পর্ব - ১]",
    "section": "",
    "text": "আমরা মেশিন লার্নিং এর বিভিন্ন এল্গোরিদম ব্যবহার করে, বিভিন্ন ধরনের সমস্যা সমাধানের চেষ্টা করি। তার মধ্যে ক্লাসিফিকেশন নিয়ে সম্ভবত আমরা সবচেয়ে বেশি কাজ করে থাকি। কিভাবে এই এল্গোরিদমগুলোকে মূল্যায়ন করা যায় তার কিছু পদ্ধতি দেখে নিবো। নতুবা বুঝবো কিভাবে কোন নির্দিষ্ট কাজের জন্য আমার কোন এল্গোরিদম ব্যবহার করা উচিত?\n\nক্লাসিফিকেশন একুরেসি(Classification Accuracy)\nএকুরেসি শব্দটা যখন আমরা ব্যবহার করি তখন আমরা আসলে এই ক্লাসিফিকেশন একুরেসিকেই বুঝিয়ে থাকি। ছোটবেলা থেকে যেধরনের হিসেব করে আমরা অভ্যস্ত এটা ঠিক সেরকম কিছুই। কোন জটিল, মারপ্যাঁচ নেই।\n\\[\\text{Accuracy} = \\frac{\\text{Number of correct predictions}}{\\text{Total number of predictions made}}\\]\nঅর্থাৎ, আমাকে যদি ১০০ টা প্রেডিকশন করতে হয় যার - মধ্যে ৯০ টা সঠিকভাবে করতে পারি আর বাকি ১০ টা ভুল করি। তবে, উপরের সূত্রমতে আমার ক্লাসিফিকেশন একুরেসি আসবে ৯০%( \\[ \\frac{৯০}{১০০} \\]) ।\nএই পদ্ধতি, একটা মডেল কতটা ভালোভাবে প্রেডিক্ট করতে পারছে কিংবা তার কার্যকারিতা সম্পর্কে জানার জন্য যথেষ্ট নয়। ধরি, Kaggle এর বিখ্যাত টাইটানিক কম্পিটেশনের জন্য তৈরি একটি মডেলের ক্লাসিফিকেশন একুরেসি ভ্যালিডেশন(validation) স্টেজে পেলাম ৯৮% - তাহলে কি সেটা দারুন কোন মডেল? যদি খেয়াল করে দেখি সে সবসময়ই “1” প্রেডিক্ট করছে (অর্থাৎ যাত্রী বেঁচে গিয়ে ছিল। ‘0’ দ্বারা দূর্ঘটনায় মৃতদের বোঝায়।),যে ডাটা দিয়ে মডেলকে প্রেডিক্ট করতে বলা হচ্ছে সেখানে ১০০ টার মধ্যে ৯৮ টাই বেঁচে যাওয়া মানুষের ডাটা ছিল। যেটার জন্য আসলে “মেশিন লার্নিং”-ই প্রয়োজন নেই, শুধু “print” সেটেটমেন্ট দিয়ে “1” প্রিন্ট করে দিলেই হয় যাবে। কিন্তু সেটা কি টেস্ট ফাইলে কাজ করবে? সেখানে এই মডেল মুখ থুবড়ে পড়ে থাকবে।\n\n\nকনফিউশন মেট্রিক্স(Confusion Matrix)\nকোন মডেল কতটুকু ভালোভাবে প্রেডিক্ট করতে পারছে তা জানা ও বুঝার জন্য এই মেট্রিক্স খুবই গুরুত্বপূর্ণ। আমরা কোন একটা বাইনারি ক্লাসিফিকেশন প্রবলেমের কথা চিন্তা করি। ব্রেস্ট ক্যান্সার ডাটাসেটের সাথে সবারই কমবেশি পরিচয় থাকার কথা। যে ডাটাসেট ইউজ করে কারো ব্রেস্ট ক্যান্সার শনাক্ত করতে পারি। যেহেতু এখানে সম্ভাব্য আউটপুট তথা ক্লাস(ব্রেস্ট ক্যান্সার আছে, ব্রেস্ট ক্যান্সার নেই) দু’টি তাই এটিকে বাইনারি ক্লাসিফিকেশন প্রবলেম বলা হচ্ছে।\nএখানে মডেলের ভুলটা আমরা কিভাবে চিন্তা করতে পারি? আমার মডেল বলছে যার ক্যান্সার আছে, সেক্ষেত্রে দু’টো সম্ভাবনা থাকে - তার আসলেই ক্যান্সার আছে, নয়তো ক্যান্সার না থাকার পরও আমার মডেল বলছে তার ক্যান্সার আছে।\nআর যার ক্যান্সার নেই সেক্ষেত্রেও এমন ভুল হতে পারে যে, তাকে বলছে তার ক্যান্সার আছে। এভাবে আমরা মোট ৪ টা সিনারিও পাই -\n\n\n\nConfusion Matrix\n\n\nছবির Predicted - YES/NO আমার মডেলের উত্তর, আর Actual YES/NO আমার কাছে যে ডাটা আছে সেটার উত্তর(বাস্তব)।\nTrue Positive - বলতে বুঝায় আমার মডেল বলছে রোগীর ব্রেস্ট ক্যান্সার আছে এবং বাস্তবেও(ডাটাসেটেও) দেখা যাচ্ছে তার ক্যান্সার আছে। সুতরাং, যখন প্রেডিক্টেড পজেটিভ রেজাল্ট আর বাস্তবের পজেটিভ রেজাল্ট মিলে যায় সেটা।\nFalse Negative - যখন আমার মডেল বলছে রোগীর ব্রেস্ট ক্যান্সার হয় নি কিন্তু বাস্তবে তার ক্যান্সার আছে। সুতরাং, যখন প্রেডিক্টেড রেজাল্ট নেগেটিভ কিন্তু বাস্তবের রেজাল্ট পজেটিভ থাকে।\nFalse Positive - যখন আমার মডেল বলছে রোগীর ক্যান্সার আছে কিন্তু বাস্তবে রোগীর ক্যান্সার নেই। সুতরাং, প্রেডিক্টেড রেজাল্ট পজেটিভ কিন্তু বাস্তবের রেজাল্ট নেগেটিভ।\nTrue Negative - যখন আমার মডেল বলছে রোগীর ক্যান্সার নেই এবং বাস্তবেও রোগীর ক্যান্সার নেই। সুতরাং, প্রেডিক্টেড রেজাল্ট নেগেটিভ এবং বাস্তবের রেজাল্টও নেগেটিভ।\nআমরা যে উপরে ক্লাসিফিকেশন একুরেসি বের করেছি সেখানে -\n\\[ \\text{Number of correct predictions} = \\text{True Positive +  True Negative} \\]\nআমরা এখন মডেলের পার্ফর্মেন্স আরেকটু ভালোভাবে বুঝতে কিছু প্রশ্ন করতে পারি। আমাদের মডেল যাদের ক্যান্সার রোগীকে শনাক্ত করছে সেটা কতটুকু বিশ্বাসযোগ্য?\n\n\nপ্রেসিশন(Precision)\nপ্রেসিশন(Precision) আমাদের উপরের প্রশ্নের উত্তর দিবে -\n\\[ \\text{Precision} = \\frac{\\text{True Positive}}{\\text{True Positive + False Positive}} \\]\nএর মান কম আসলে বুঝতে পারবো আমাদের মডেল ক্যান্সার রোগীকে সঠিকভাবে শনাক্ত করতে পারছে না বরং যাদের ক্যান্সার নেই তাদের ক্যান্সার রোগী হিসেবে শনাক্ত করছে। উদাহরণ দিয়ে যদি বুঝতে চেষ্টা করি -\nTrue Positive(TP) = 1\nFalse Positive(FP) = 2\n\\[Precision = \\frac{TP}{TP + FP} = \\frac{1}{1 + 2} = 0.33\\]\nসুতরাং, আমার মডেল যদি ১০০ জন ক্যান্সার রোগী শনাক্ত করে তবে তার মধ্যে কেবল ৩৩ জন প্রকৃতপক্ষে ক্যান্সার রোগী।\n\n\nরিকল(Recall)\nএখন প্রশ্ন যদি হয় - আমাদের মডেল প্রকৃতপক্ষে কত ক্যান্সার রোগীকে শনাক্ত করতে পেরেছে?\nএই প্রশ্নের উত্তর রিকল(Recall) থেকে পাবো আমরা।\n\\[\\text{Recall} = \\frac{\\text{True Positive}}{\\text{True Positive + False Negative}} \\]\nএখন আমরা ছোট একটা উদাহরণ দিয়ে বুঝে নিই -\nTrue Positive(TP) = 1\nFalse Negative(FN) = 9\n\\[Recall =  \\frac{TP}{TP + FN} = \\frac{1}{1 + 9} = 0.1\\]\nএর মানে দাঁড়াচ্ছে, মোট ১০ জন ক্যান্সার রোগীর মধ্যে সে ১ জনকে সঠিকভাবে শনাক্ত করতে পেরেছে।\n\nUpdate-1 on September 14th\n\n\n\nএফ ওয়ান স্কোর(F1 Score)\nপ্রেসিশন এবং রিকল দুইটা আলাদা প্রশ্নের উত্তর দেয়। কিন্তু আমার মডেলকে ঠিকভাবে মূল্যায়নের জন্য আসলে এদের যেকোন একজনকে নয় বরং উভয়কেই প্রয়োজন। দুইটার মধ্যে একটা সামঞ্জস্য করে কিছু করতে পারলে আমাদের জন্য মঙ্গল। সেই কাজের দায়িত্ব নেয় - এফ ওয়ান স্কোর(F1 score)। একে “এফ স্কোর”(F score) অথবা “এফ মেজার”(F measure)-ও বলা হয়ে থাকে। সমীকরণের মাধ্যমে যদি আমরা দেখতে চাই -\n\\[ F1 = 2 * \\frac{1}{\\frac{1}{precision} + \\frac{1}{recall}} = 2 * \\frac{precision * recall}{precision + recall} \\]\nপ্রেসিশন এবং রিকল-কে ধরে এরিথমেটিক মিন(arithmetic mean) বের করা হয় নি। কারণ দুইটার হর(denominator) আলাদা। চাইলেই দু’টি সংখ্যার গড় বের করা সম্ভব - যোগ করে, ২ দিয়ে ভাগ দিয়ে। কিন্তু তাতে কি আদৌ কোন অর্থবহ মানে বের করা সম্ভব হবে?\nযার জন্য প্রেসিশন আর রিকলের হার্মোনিক মিন(Harmonic mean) বের করা হয়। আর এই গড়কে “এফ ওয়ান স্কোর”(F1 Score) বলে। এর মানের রেঞ্জ [০,১]\n\nResources\n1 - Metrics To Evaluate Machine Learning Algorithms in Python\n2 - Metrics to Evaluate your Machine Learning Algorithm\n3 - Classification: True vs. False and Positive vs. Negative"
  },
  {
    "objectID": "posts/mle-interview-preparation/index.html",
    "href": "posts/mle-interview-preparation/index.html",
    "title": "মেশিন লার্নিং ইন্টার্ভিউ প্রিপারেশন (Machine Learning Interview Preparation)",
    "section": "",
    "text": "বাংলাদেশে ২/৩ বছর আগেও মেশিন লার্নিং রিলেটেড জব পোস্ট খুব একটা চোখে পড়তো না। ইদানিংকালে ইন্টার্ন পজিশনে, জুনিওর পজিশনে কিংবা সিনিওর পজিশনেও মেশিন লার্নিং ইঞ্জিনিয়ার/ডাটা সায়েন্টিস্ট রোলের জন্য চাকরির বিজ্ঞপ্তি দিতে দেখা যাচ্ছে বিভিন্ন কোম্পানিকে।\nবর্তমান সময়ে CS গ্র্যাড কিংবা CS গ্র্যাড ছাড়াও অনেকেরই ফাইনাল ইয়ার থিসিস টপিক মেশিন লার্নিং ওরিয়েন্টেড হয়ে থাকে। আর হালের ক্রেজ হিসেবেও মেশিন লার্নিং-কে বিবেচনা করতে পারি আমরা। Software Engineer রোলের জন্য কিভাবে নিজেকে প্রস্তুত করতে হয়, সিভি কিভাবে তৈরি করতে হয় আর ইন্টার্ভিউ প্রিপারেশন কিভাবে নিতে হয় তা নিয়ে যথেষ্ট লিখা থাকলেও, এই নতুন মেশিন লার্নিং রিলেটেড জব পজিশনের জন্য যথেষ্ট ভালো রিসোর্স পাওয়া দুষ্কর। এই লিখাতে সেই জায়গার শূন্যস্থান পূরণের একটা চেষ্টা করবো মাত্র(বাংলাদেশের কন্টেক্সটে)।\n\nমেশিন লার্নিং\nমেশিন লার্নিং রিলেটেড পোস্টে অবশ্যই মেশিন লার্নিং নিয়ে প্রশ্ন করা হবে। মেশিন লার্নিং এর মতো বড় ডোমেইনের ক্ষেত্রে সে প্রশ্নগুলি কোথা থেকে আসতে পারে, তা জেনে ইন্টার্ভিউ এর আগে নিজেকে প্রস্তুত করা একটু কঠিন কাজ হতে পারে। এক্ষেত্রে সাজেশন হলোঃ - আপনার যেখানে ইন্টার্ভিউ, তারা কি নিয়ে কাজ করে তা একটু ঘেঁটে দেখেন। ধরেন, আপনি ব্যাংকিং অথবা ফাইনান্সিয়াল সেক্টরে মেশিন লার্নিং ইঞ্জিনিয়ার রোলের জন্য এপ্লাই করে ইন্টার্ভিউ এর জন্য কল পেয়েছেন। সেখানে ট্যাবুলার ডাটা নিয়ে কাজ করার সম্ভাবনা বেশি। আর সেক্ষেত্রে ট্রেডিশনাল মেশিন লার্নিং (স্ট্যাটিস্টিক্যাল লার্নিং ) এর গুরুত্ব হয়তো বেশি হবে। Logistic Regression, Linear Regression , Tree Based Algorithms - এর খুঁটিনাটি দেখে গেলে হয়তো সুবিধা পাবেন( SQL নিয়ে পূর্ব অভিজ্ঞতা থাকলে সেটাও এখানে কাজে দিতে পারে )। আবার যারা কম্পিউটার ভিসন নিয়ে কাজ করেন তাদের কোম্পানিতে ইন্টার্ভিউ দেয়ার সময় CNN এর টুকিটাকি সম্পর্কে জানা থাকা ভালো। তবে এখানে বলে রাখা ভালো যে, আপনি হয়তো CNN নিয়ে আগে কাজ করেন নি, সেটা ইন্টার্ভিউতে যাওয়ার আগে দেখে ভারি ভারি শব্দ ইন্টার্ভিউয়ারকে শোনাতে যাবেন না, হিতের বিপরীত হতে পারে। - (এই পয়েন্ট না বললেও চলতো, তাও লিখে রাখছি ) নেট ঘেঁটে দেখতে পারেন আপনি যে কোম্পানিতে ইন্টার্ভিউ দিতে যাচ্ছেন সেই কোম্পানিতে ইন্টার্ভিউ দেয়ার অভিজ্ঞতা কেউ ব্লগ আকারে পাবলিশ করেছে কিনা। সেখান থেকে ভালো একটা ধারণা পাবেন। - আরেকটা খুব গুরুত্বপূর্ণ পয়েন্ট হলো - আপনি সিভিতে নিজের কাজ সম্পর্কে যা লিখেছেন তা সম্পর্কে স্পষ্ট ধারণা রাখা। আপনি বর্তমান কর্মক্ষেত্রে যা নিয়ে কাজ করছেন, নিজের অবসর সময়ে বানানো যে প্রজেক্ট সম্পর্কে লিখেছেন, নিজের ভার্সিটির যে প্রজেক্ট/থিসিস/রিসার্চ পেপারের কথা সিভিতে উল্লেখ করেছেন, সেগুলো ইন্টার্ভিউতে যাওয়ার আগে আরেকবার দেখে যাওয়া। ঐসব কাজের জন্যই হয়তো আপনাকে ইন্টার্ভিউতে ডাকা হয়েছে, অথচ ইন্টার্ভিউতে সে সম্পর্কে যদি আপনি বিস্তারিত না বলতে পারেন সেটা নিজের কাছেই হয়তো খারাপ লাগবে।\nএতো গেলো কি কি বিষয় দেখা যেতে পারে, কিন্তু কতটুকু দেখবেন? আপনি যদি মেশিন লার্নিং রিসার্চার পজিশনে এপ্লাই করে থাকেন তাহলে অবশ্যই থিওরেটিকাল প্রশ্নের জন্য প্রস্তুত থাকতে হবে। বাংলাদেশে ভার্সিটিগুলোর RA পজিশন ছাড়া আর কোন কোম্পানি শুধুমাত্র RnD এর জন্য জব সার্কুলার ছেড়েছে এমন চোখে পড়েনি। আর মেশিন লার্নিং ইঞ্জিনিয়ার/ রিসার্চার , ডাটা সায়েন্টিস্ট/ এনালিস্ট ইত্যাদি গাল ভারী করা নামগুলোর পার্থক্যটা জানা থাকলেও আপনার হয়তো সুবিধা হবে, কোন জবের সাথে আপনার ইন্টারেস্ট ম্যাচ করে তা বুঝে এপ্লাই করার জন্য।\nমেশিন লার্নিং ইঞ্জিনিয়ারিং রোলের জন্য হয়তো আপনার বিভিন্ন মেশিন লার্নিং এলগোরিদমের নাড়ীনক্ষত্র (ম্যাথেমেটিকাল ইকুয়েশন, প্রুফ) জানা থাকা আবশ্যিক না, তবে জানলে ক্ষতি নেই। আবার তাই বলে শুধু হাই-লেভেল এপিয়াই কল করে কাজ করার যোগ্যতা থাকলেই চলবে তা মনে করার কারণ নেই। মেশিন লার্নিং এর বেসিক যে কনসেপ্টগুলো, যেগুলো যেকোন অনলাইন কোর্সের প্রথমেই কভার করে সে সম্পর্কে জানা থাকতে হবে(যেমনঃ ওভার ফিটিং, আন্ডার ফিটিং, ডাটা ট্রেইন/ভ্যালিডেশন/টেস্ট সেটে ভাগ করা, লস ফাংশনের কাজ, ব্যাক প্রোপাগেশন, ভ্যানিশিং গ্র্যাডিয়েন্ট, এক্সপ্লোডিং গ্র্যাডিয়েন্ট ইত্যাদি)। আর যেসব মেশিন লার্নিং এল্গো, আর্কিটেকচার নিয়ে কাজ করেছেন সেগুলোর সম্পর্কে intuitive (মানে কোনটা কখন ভালো কাজ করে, কেন করে) ধারনা থাকা অত্যন্ত জরুরি। তা নাহলে কোন প্রবলেম সল্ভ করার জন্য কখন কোনটা ব্যবহার করা উচিত তা বুঝবেন না।\n\n\nসফটওয়্যার ইঞ্জিনিয়ারিং\nএই লিখাটা মূলত মেশিন লার্নিং ইঞ্জিনিয়ারদের কথা মাথায় রেখেই লিখা। সেক্ষেত্রে সফটওয়্যার ইঞ্জিনিয়ারিং একটা গুরুত্বপূর্ণ অংশ। আগেই বলেছি মেশিন লার্নিং নিয়ে শুধু রিসার্চ করার মতো স্কোপ বাংলাদেশে কম, আর বাহিরেও স্টার্টাপগুলোতে মেশিন লার্নিং নিয়ে যারা কাজ করে তাদেরকে মডেল তৈরি করার কাজও করতে হয়, এবং সেই মডেলকে ডিপ্লয় দেয়ার কাজও করতে হয়। আর ডিপ্লয় করার পরবর্তীতে সেই মডেলের পার্ফর্মেন্স মনিটরিং করে তাকে রিট্রেইন করার কাজটুকুও করতে হয়। এই সকল কাজের জন্য সফটওয়্যার ইঞ্জিনিয়ারিং রিলেটেড জ্ঞান থাকা অত্যন্ত জরুরি।\nআপনি কোন পজিশনের জন্য এপ্লাই করছেন তার উপর নির্ভর করবে এইখানে আপনার কতটুকু দক্ষতা ইন্টার্ভিউয়ার চাচ্ছেন। জুনিওর পজিশনে বেসিক কিছু জিনিস জানা থাকলেই হবে, যেগুলো অন্যান্য সফটওয়্যার ইঞ্জিনিয়ারিং জবের জন্যও চাওয়া হয়ে থাকে। যেমনঃ OOP রিলেটেড জ্ঞান, REST API নিয়ে কাজ করার অভিজ্ঞতা, ইত্যাদি।\nআপনি যদি মিড লেভেল কিংবা সিনিওর পজিশনের জন্য এপ্লাই করে থাকেন, সেক্ষেত্রে AWS অথবা অন্য কোন ক্লাউড প্লাটফর্মে কাজ করার অভিজ্ঞতা একটি বাড়তি চাওয়া হতে পারে।\n\n\nপ্রবলেম সল্ভিং\nএর মাধ্যমে আসলে দেখা হয় আপনি কিভাবে একটা সমস্যাকে সমাধান করার চেষ্টা করছেন, আপনি যখন কোন একটা সমস্যা সমাধান করার চিন্তাটা ইন্টার্ভিউ বোর্ডে শেয়ার করবেন - সেই চিন্তা নিয়েও হয়তো আপনার সাথে ইন্টার্ভিউ বোর্ডের অন্য মানুষদের আলোচনা হবে। এর মাধ্যমে আপনারা উভয় পক্ষই বুঝতে পারবেন, আপনারা একসাথে কাজ করলে কেমন হতে পারে।\nআপনি কি তাদের প্রশ্ন বুঝতে পারছেন? আপনি কি তাদের উল্লেখিত সমস্যা সম্পর্কে আরেকটু গভীরে চিন্তা করে কোন কর্নার কেস নিয়ে প্রশ্ন করছেন? আপনি হয়তো একটা সমাধান দিলেন সেই সমাধানের কোথাও অপ্টিমাইজেশনের সুযোগ আছে, সেটা বলার পরে কি আপনি সেটা নিয়ে চিন্তা করে সঠিক পথে এগুতে পারছেন? এমন টুকটাক জিনিসের মাধ্যমে আপনাকে বিচার করা তাদের জন্য সহজ হয়ে উঠে।\nএর জন্য আপনি LeetCode, HackerRank, HackerEarth এর বিভিন্ন প্রবলেম সল্ভ করে নিজেকে তৈরি করতে পারেন। একই ধরনের সমস্যা অনেকগুলো সমাধান না করে, বিভিন্ন ধরনের সমস্যা কয়েকটা বুঝে সমাধান করা বেশি জরুরি। আর আপনি নিজের মতো করে সমাধান করার পরে ডিসকাশনে মানুষের সমাধানও গুলো পড়ে দেখতে পারেন, নিজের চিন্তায় কোথায় আর উন্নতির সুযোগ আছে জানার জন্য। উল্লেখ না করলেই নয়, আপনি যে সমাধান দিচ্ছেন তার টাইম কমপ্লেক্সিটি এবং স্পেস কমপ্লেক্সিটি নিয়েও আপনাকে প্রশ্ন করা হতে পারে।\n\n\nবোনাস সাজেশন\n\nআপনি এখন যেই পজিশনের চাকরিই খুঁজছেন না কেন, দেশের ভিতররের এবং বাহিরের সেই একই পজিশনের জব পোস্টগুলি ঘেঁটে দেখেন। সেই অনুযায়ী নিজেকে প্রস্তুত করুন। নিজেকে প্রস্তুত করার বারটা একটু উপরেই রাখুন।\nঅন্যান্য অভিজ্ঞ মানুষের মতামত জানার জন্য, মেশিন লার্নিং কিংবা সফটও্যার ইঞ্জিনিয়ারিং রিলেটেড আপডেট, বেস্ট প্র্যাকটিসেস জানার জন্য LinkedIn , Twitter এ সব ফিল্ডের অভিজ্ঞ মানুষদের ফলো করা শুরু করুন। অনেক কিছু শিখতে পারবেন।\nআপনি যদি CS ব্যাকগ্রাউন্ডের কেউ না হয়ে থাকেন, কিন্তু মেশিন লার্নিং নিয়ে কাজ করতে আগ্রহী, সেক্ষেত্রে অনলাইন কোর্সের সহায়তায় কোর কম্পিউটার সায়েন্সের কোর্সগুলি করে ফেলতে পারেন(ডাটা স্ট্রাকচার, এলগোরিদম ইত্যাদি)\n\nলিখাটা অনেক হাই-লেভেল ওভারভিউ হিসেবে চিন্তা করতে পারেন। প্রতিটা ভাগ নিয়ে আরও বিস্তারিত লিখার কিংবা কথা বলার সুযোগ আছে। তবে সেইগুলো নিয়ে আলোচনার লক্ষ্য এই ব্লগ পোস্ট নয় এবং তা নিয়ে লিখার পর্যাপ্ত অভিজ্ঞতাও এখনও অর্জন করি নি। তবে নিজে যতোটুকু পড়ে জেনেছি, কাজ করতে গিয়ে যতোটুকু অনুধাবন করেছি, তার প্রেক্ষিতে এই ব্লগ পোস্টটি লিখা।\n\n\nরিসোর্সেসঃ\n\nইন্টার্ভিউ এক্সপেরিয়েন্স সম্পর্কে জানার জন্য\n\nTahanima’s Blog\n\n\n\nইন্টার্ভিউ প্রিপারেশন কোর্স\n\nMachine Learning Interview Preparation\nData Science Interview Prep\n\n\n\nসফটওয়্যার ইঞ্জিনিয়ারিং\n\nTechTong Youtube Channel\n\n\n\nমেশিং লার্নিং সিস্টেম\n\nStanford MLSys Seminars\nFull Stack Deep Learning\n\n\n\nমেশিং লার্নিং কনসেপ্ট(Practical)\n\nKaggle Courses\n\n\n\nডাটা স্ট্রাকচার এন্ড এলগোরিদম\n\nIntro to Data Structures and Algorithms\nশাফায়েতের ব্লগ প্রোগ্রামিং ও অ্যালগরিদম টিউটোরিয়াল"
  },
  {
    "objectID": "posts/vscode-dev-container/index.html",
    "href": "posts/vscode-dev-container/index.html",
    "title": "Developing inside a Container with VSCode",
    "section": "",
    "text": "In this blog post, we will try to add a few files in our project folder, to start developing an existing project on the docker container with VSCode. We will be working on one of my python pet project.\nIf you are in a hurry and just want to go through the code, here is the github repo. Go through .devcontainer folder.\nLet’s start….\nPre-requisites: VSCode, Docker."
  },
  {
    "objectID": "posts/vscode-dev-container/index.html#architecture",
    "href": "posts/vscode-dev-container/index.html#architecture",
    "title": "Developing inside a Container with VSCode",
    "section": "Architecture",
    "text": "Architecture\nThe architecture of VS Code working with docker container -\n\nWe won’t go into the details here. If you are interested, please read the documentation."
  },
  {
    "objectID": "posts/vscode-dev-container/index.html#installing-extension",
    "href": "posts/vscode-dev-container/index.html#installing-extension",
    "title": "Developing inside a Container with VSCode",
    "section": "Installing Extension",
    "text": "Installing Extension\nInstall Remote - Containers from extensions marketplace."
  },
  {
    "objectID": "posts/vscode-dev-container/index.html#create-.devcontainer-folder",
    "href": "posts/vscode-dev-container/index.html#create-.devcontainer-folder",
    "title": "Developing inside a Container with VSCode",
    "section": "Create .devcontainer Folder",
    "text": "Create .devcontainer Folder\nIn our project, we need to create a .devcontainer folder. Here, we will keep our configuration files, which will be used to create our container for development purposes. This folder and its’ files will tell our recently installed extension to create a docker container and use it for development."
  },
  {
    "objectID": "posts/vscode-dev-container/index.html#create-dockerfile",
    "href": "posts/vscode-dev-container/index.html#create-dockerfile",
    "title": "Developing inside a Container with VSCode",
    "section": "Create Dockerfile",
    "text": "Create Dockerfile\nI have modified the Dockerfile a little bit, according to my need. Except that, this file was copied from vscode-remote-try-python. This definition will be used to create our development container.\nARG VARIANT=3.8-bullseye\nFROM mcr.microsoft.com/vscode/devcontainers/python:0-${VARIANT}\n\n# [Choice] Node.js version: none, lts/*, 16, 14, 12, 10\nARG NODE_VERSION=\"none\"\nRUN if [ \"${NODE_VERSION}\" != \"none\" ]; then su vscode -c \"umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install ${NODE_VERSION} 2>&1\"; fi\n\n# [Optional] If your pip requirements rarely change, uncomment this section to add them to the image.\nCOPY requirements.txt /tmp/pip-tmp/\nCOPY requirements.dev.txt /tmp/pip-tmp/\nRUN pip3 --disable-pip-version-check --no-cache-dir install -r /tmp/pip-tmp/requirements.dev.txt \\\n   && rm -rf /tmp/pip-tmp"
  },
  {
    "objectID": "posts/vscode-dev-container/index.html#create-devcontainer.json",
    "href": "posts/vscode-dev-container/index.html#create-devcontainer.json",
    "title": "Developing inside a Container with VSCode",
    "section": "Create devcontainer.json",
    "text": "Create devcontainer.json\nNow, we have our dockerfile to create a container from it. But we might want to pass some build/runtime arguments for our need, we can configure those in this file. We can also add the necessary vscode extension ids that will be needed for our development. And VSCode will take care of all of our configured needs.\nThere is one thing that I want to add here. I have a locally running PostgreSQL database. I was struggling to connect my application(which is running inside a container) with the local database. Special thanks to Sadman Amin, for suggesting me to use --network=host as an argument, and this resolved the issue.\n{\n    \"name\": \"Python 3\",\n    \"build\": {\n        \"dockerfile\": \"Dockerfile\",\n        \"context\": \"..\",\n        \"args\": {\n            \"VARIANT\": \"3.8-buster\",\n            \"NODE_VERSION\": \"lts/*\",\n        }\n    },\n    \"runArgs\": [\"--network=host\"],\n\n    // Set *default* container specific settings.json values on container create.\n    \"settings\": {\n        \"terminal.integrated.profiles.linux\": {\n            \"bash\": {\n                \"path\": \"/bin/bash\"\n            }\n        },\n        \"python.defaultInterpreterPath\": \"/usr/local/bin/python\",\n        \"python.languageServer\": \"Default\",\n        \"python.linting.enabled\": true,\n        \"python.linting.pylintEnabled\": true,\n        \"python.formatting.autopep8Path\": \"/usr/local/py-utils/bin/autopep8\",\n        \"python.formatting.blackPath\": \"/usr/local/py-utils/bin/black\",\n        \"python.formatting.yapfPath\": \"/usr/local/py-utils/bin/yapf\",\n        \"python.linting.banditPath\": \"/usr/local/py-utils/bin/bandit\",\n        \"python.linting.flake8Path\": \"/usr/local/py-utils/bin/flake8\",\n        \"python.linting.mypyPath\": \"/usr/local/py-utils/bin/mypy\",\n        \"python.linting.pycodestylePath\": \"/usr/local/py-utils/bin/pycodestyle\",\n        \"python.linting.pydocstylePath\": \"/usr/local/py-utils/bin/pydocstyle\",\n        \"python.linting.pylintPath\": \"/usr/local/py-utils/bin/pylint\"\n    },\n\n    // Add the IDs of extensions you want installed when the container is created.\n    \"extensions\": [\n        \"ms-python.python\",\n        \"ms-python.vscode-pylance\"\n    ],\n\n    // Use 'forwardPorts' to make a list of ports inside the container available locally.\n    \"forwardPorts\": [8080],\n\n    // Use 'portsAttributes' to set default properties for specific forwarded ports. More info: https://code.visualstudio.com/docs/remote/devcontainerjson-reference.\n    \"portsAttributes\": {\n        \"8080\": {\n            \"label\": \"DVD Rental\",\n            \"onAutoForward\": \"notify\"\n        }\n    },\n\n    // Comment out to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.\n    \"remoteUser\": \"vscode\"\n}\nThere are other available properties of this JSON file that we can add, for more info."
  },
  {
    "objectID": "posts/vscode-dev-container/index.html#preparing-container",
    "href": "posts/vscode-dev-container/index.html#preparing-container",
    "title": "Developing inside a Container with VSCode",
    "section": "Preparing Container",
    "text": "Preparing Container\nWe are done with our preparation, now we can tell VSCode to do its magic:\n\nPress F1 and select the Remote-Containers: Open Folder in Container… command.\nSelecting the project folder will trigger the container to build and start."
  },
  {
    "objectID": "posts/vscode-dev-container/index.html#git-question",
    "href": "posts/vscode-dev-container/index.html#git-question",
    "title": "Developing inside a Container with VSCode",
    "section": "Git Question",
    "text": "Git Question\nIn the beginning, I wasn’t sure about the git configurations. How one might commit/push from a container. Then I found my answer here Working with Git?."
  },
  {
    "objectID": "posts/vscode-dev-container/index.html#conclusion",
    "href": "posts/vscode-dev-container/index.html#conclusion",
    "title": "Developing inside a Container with VSCode",
    "section": "Conclusion",
    "text": "Conclusion\nThe experience was quite good for me, and I enjoyed working on this. In my opinion, this will help team members to not worry about setting up the development environment on their workstation. In a project, different team members use different OS on their workstations. Sometimes it becomes difficult to work with identical system configurations. This container based development might minimize such difficulties.\nFinally, to get started with, I will suggest to clone and run vscode-remote-try-python."
  },
  {
    "objectID": "posts/vscode-dev-container/index.html#reference",
    "href": "posts/vscode-dev-container/index.html#reference",
    "title": "Developing inside a Container with VSCode",
    "section": "Reference",
    "text": "Reference\n\nUsing Visual Studio Code from a docker image locally or remotely via VS Online\nVS Code Remote / GitHub Codespaces Container Definitions"
  },
  {
    "objectID": "posts/single-responsibility-principle/index.html",
    "href": "posts/single-responsibility-principle/index.html",
    "title": "সিঙ্গেল রেস্পন্সিবিলিটি প্রিন্সিপল (Single Responsibility Principle)",
    "section": "",
    "text": "অব্জেক্ট ওরিয়েন্টেড প্রোগ্রামিং নিয়ে যারা কাজ করেছেন এবং কোনদিন ডিজাইন প্রিন্সিপল বিষয়ে গুগল করেছেন - SOLID principles টার্মটার সাথে তারা কমবেশি সবাই পরিচিত।\nঅব্জেক্ট ওরিয়েন্টেড প্রোগ্রামিং এর ৫-টি গুরুত্বপূর্ণ ডিজাইন প্রিন্সিপলের প্রথম অক্ষর নিয়ে এই S.O.L.I.D. টার্মটির উদ্ভব হয়েছে। এইসব ডিজাইন প্রিন্সিপলগুলো একটি সফটওয়্যার ডিজাইনকে সহজে বুঝতে সাহায্য করে, সেটাকে রক্ষণাবেক্ষণে সাহায্য করে এবং পরবর্তীতে সফটওয়্যার-এর পরিধি বৃদ্ধিকে সহজ করে। সকল সফটওয়্যার ইঞ্জিনিয়ারের এইসব ডিজাইন প্রিন্সিপল সম্পর্কে ধারণা থাকা জরুরি।\nআজকে আমরা এই S.O.L.I.D. -এর S নিয়ে আলোচনা করবো।\nS = Single Responsibility Principle(SRP)\nএই প্রিন্সিপলের মূল কথা হচ্ছে - “A class should have one, and only one, reason to change.” যেটাকে আরেকটু সহজবোধ্য করা যায় যদি বলি - একটি ক্লাস শুধুমাত্র একটি নির্দিষ্ট বিষয়েই কাজ করবে এবং সেই কাজের জন্যই শুধুমাত্র পরিবর্তিত হবে। এটি ক্লাসের মেথডের জন্যও সত্য, আবার একটি মডিউলের কথা বললে সেখানেও সত্য।\nদেখুন, দৈনন্দিন জীবনে প্রতিনিয়ত আমরা এই প্রিন্সিপল মেনেই কিন্তু কাজ করছি। উদাহরণস্বরূপ, ইউনিভার্সিটিতে ভর্তি প্রক্রিয়ার কথা চিন্তা করতে পারি। আমরা রেজিস্ট্রার অফিস থেকে একটা ফর্ম তুলি এবং সেটা ফিলাপ করি। এরপরে ব্যাংকে নির্দিষ্ট পরিমাণ টাকা জমা দিয়ে রিসিপ্ট সংগ্রহ করি, মেডিকেল চেকাপ করিয়ে একটা এপ্রুভাল সংগ্রহ করি, আরো কোন বাড়তি কাজ থাকলে সেগুলো সম্পন্ন করে সকল কাগজ একসাথে আবার রেজিস্ট্রেশন অফিসে জমা দিই। মেডিকেল চেকের সময় কিন্তু ডাক্তার টাকা জমা নিচ্ছে না, কিংবা ব্যাংকে টাকা জমা দেয়ার সময় আমার হেলথ চেকাপের কাজটিও করে দিচ্ছে না।\nউপরের উদাহরণের প্রত্যেকটি কাজ স্বতন্ত্র, শুধু রেজিস্ট্রার অফিস চেক করে প্রত্যেকটি কাজ সঠিকভাবে সম্পন্ন হয়েছি কি-না। প্রত্যেকে আলাদাভাবে কিভাবে কাজ করেছে সেটা কিন্তু আবার তার দেখার বিষয় না।\nউপরের বাস্তবিক ঘটনা থেকে একধরনের আন্দাজ পাওয়ার কথা Single Responsibility বলতে কি বোঝায়। সেখানে একজনের কাজের ধরনে পরিবর্তন হলে অন্য আরেকজনের কাজে তা প্রভাব ফেলবে না। ভার্সিটি এখন যদি বিকাশের মাধ্যমে টাকা নেয়ার শুরু করে তবে কিন্তু শুধুমাত্র একটা জায়গায় পরিবর্তন হচ্ছে, বাকিসব আগের মতোই থাকছে। আমরা এই লিখা থেকে যা বুঝতে চাচ্ছি তার মূল উদ্দেশ্যই এখানে। যে যার যার মতো কাজ করলে একজনের পরিবর্তন অন্যজনকে প্রভাবিত করবে না। যা একটি ভালো সফটওয়্যারের বৈশিষ্ট্য হওয়া উচিত।\nযেহেতু এখানে আমরা অব্জেক্ট ওরিয়েন্টেড প্রোগ্রামিং এর প্রিন্সিপল হিসেবে একে ব্যাখ্যা করতে চাচ্ছি, এবার তবে কোড দেখা যাক। (পাইথন প্রোগ্রামিং ল্যাঙ্গুয়েজ ব্যবহার করে কোডিং উদাহরণগুলো দেয়া হবে)\nclass Student:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n\n    def calculate_semester_fee(self):\n        # calculate semester_fee\n        return semester_fee\n\n    def calculate_semester_cgpa(self):\n        # calculate semester_cgpa\n        if semester_cgpa < 2.0:\n            # send message to guardian\n        return semester_cgpa\nএখানে Stuednt - নামের একটি ক্লাস তৈরি করা হয়েছে। যেখানে স্বাভাবিকভাবেই Student এর নাম এবং আইডি ফিল্ড আছে(init মেথডে ইনিশিয়ালাইজেশনের কাজ হয়ে থাকে)। তাছাড়া আমরা আরো দু’টি মেথড দেখতে পাচ্ছি -\n১. calculate_semester_fee - যার কাজ সেমিস্টারের ফি ক্যালকুলেট করা,\n২. calculate_semester_cgpa - যার কাজ সেমিস্টারের CGPA ক্যালকুলেট করা।\nSingle Responsibility Principle এর মূলকথা এখানে কিভাবে ক্ষুন্ন হচ্ছে তা একটু দেখে নেয়া যাক। নিম্নোক্ত ব্যাখ্যা পড়ার আগে নিজে একবার চেষ্টা করে দেখুন, ভুলগুলো বের করতে পারেন কি-না কিংবা ভুলগুলো নিম্নোক্ত ব্যাখ্যার সাথে মিলে কি-না। একটা Student ক্লাসে যা কিছু থাকবে তার প্রতিটি-ই Student কেন্দ্রিক হতে হবে। আর এখানে যদি কোন পরিবর্তন আনতেই হয় সেটাকে অবশ্যই Student সম্বন্ধীয় হতে হবে।\nপ্রথমে, calculate_semester_fee মেথডের কথায় আসি। একজন Student প্রতি সেমিস্টারে কি পরিমাণ ফি প্রদান করবে সেটা সেই Student এর দেখার বিষয় না। এটা ইউনিভার্সিটির কর্তৃপক্ষের দেখার বিষয়।\nএকটা নির্দিষ্ট সময় পর পর ইউনিভার্সিটিগুলোর সেমিস্টার ফি-র পরিবর্তন হয়। তাছাড়াও নানা কারণে যেমন মাঝে একবার ভ্যাট দিতে হলো, এমন কোন কারণে সেমিস্টার ফি ক্যালকুলেশনের পরিবর্তন ঘটতে পারে। আমার বর্তমান Student ক্লাসের ডিজাইন অনুযায়ী, সেমিস্টার ফি-র ক্যালকুলেশন পরিবর্তনের জন্য আমার Student ক্লাসের calculate_semester_fee মেথডের ভিতরে পরিবর্তন করতে হচ্ছে। যেটা Student ক্লাসের সাথে সরাসরি সম্পর্কিত না।\nদ্বিতীয়ত, calculate_semester_cgpa মেথডে একজন Student এর এক সেমিস্টারের সিজিপিএ হিসেব করা হচ্ছে। সেই সিজিপিএ যদি আবার ২ এর থেকে কম হয় সেক্ষেত্রে অভিবাবকের কাছে ম্যাসেজ চলে যাবে। একটা ক্লাস দিয়ে সাধারণত আমরা কোনকিছুকে উপস্থাপন করি, উপস্থাপনায় কি ছাত্র-ছাত্রীর সিজিপিএ কিভাবে ক্যালকুলেট করা হচ্ছে তা থাকা উচিত? তার উপর সেই সিজিপিএ একটা নির্দিষ্ট সংখ্যার নিচে গেলে কি করতে হবে তাও বলে দেয়া হচ্ছে। ইউনিভার্সিটি যদি কোনদিন সিদ্ধান্ত নেয় ২ এর বদলে ১.৫ এর নিচে সিজিপিএ হলে স্তুডেন্টের অভিবাবকের কাছে ম্যাসেজ চলে যাবে কিংবা অভিভাবকের মোবাইলে ম্যাসেজ যাওয়ার পরিবর্তে মেইল যাবে এসবক্ষেত্রে আমাকে কোডে পরিবর্তন করতে হচ্ছে, যেটা কাম্য নয়।\nStudent ক্লাসে আমার এমন দু’টি মেথড আছে যারা আমার ক্লাসের সাথে সরাসরি সম্পর্কিত না এবং তাদের জন্য আমার ক্লাসের কোডকে বারবার পরিবর্তন করতে হচ্ছে। এখানেই আমি Single Responsibility Principle মান্য করি নি।\nতবে সমাধান কি? উপরোক্ত ক্লাসকে ভেঙ্গে আমরা নতুন তিনটি ক্লাস তৈরি করতে পারি, যার প্রত্যেকে নির্দিষ্ট কাজের জন্য দায়ী থাকবে।\nclass Student:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n\nclass SemesterFeeCalculationService:\n    def calculate_semester_fee(self, course_taken):\n        # calculate semester_fee\n        return semester_fee\n\nclass CgpaCalculationService:\n    def calculate_semester_cgpa(self, student, minimum_cgpa):\n        # calculate semester_cgpa\n        if semester_cgpa < minimum_cgpa:\n            # send message to guardian\n        return semester_cgpa\nএখন আমি যদি Student ক্লাসে নতুন ফিল্ড যোগ করতে চাই(যেমনঃ address) তবে Student ক্লাসকে, সেমিস্টার ফি ক্যালকুলেশনে পরিবর্তন করতে চাইলে SemesterFeeCalculationService ক্লাসকে কিংবা সিজিপিএ ক্যালকুলেশনে পরিবর্তন করতে চাইলে শুধুমাত্র *CgpaCalculationService ক্লাসকেই আমার পরিবর্তন করতে হবে। প্রত্যেকটি ক্লাস একটি নির্দিষ্ট ডোমেইনে কাজ করবে বলে এটি সম্ভব হয়েছে। উপরোক্ত প্রতিটা ক্লাসেই আমি নতুন মেথড এড করতে পারি, যার জন্য অন্য কারো কাজে কোন ক্ষতিও হবে না।\nএকটি ক্লাস ভেঙ্গে নতুন ৩ টি ক্লাস তৈরি করার পরও এক জায়গায় সমস্যা রয়ে গেছে, সেটা CgpaCalculationService ক্লাসে। ক্যালকুলেটরের কাজ হবে শুধু ক্যালকুলেশন করে দেয়া, কম বা বেশি চেক করা তার কাজ হওয়া উচিত না। আবার সেটার প্রেক্ষিতে কোন একশন নেয়াও তার কাজের মধ্যে পড়ে না। এখন আমি মোবাইলে ম্যাসেজ পাঠাচ্ছি কিন্তু পরে মেইল যদি করার কথা চিন্তা করি কিংবা উভয়ই একসাথে করার কথা চিন্তা করি তবে কিন্তু আমার এই মেথডে পরিবর্তন আনতে হবে।\nআসুন, এই সমস্যাটা কিভাবে দূর করা যায় তা একটু দেখে নিই। প্রথমে CgpaCalculationService ক্লাসকে পরিষ্কার করি।\nclass CgpaCalculationService:\n    def calculate_semester_cgpa(self, course_gpas):\n        # calculate semester_cgpa\n        return semester_cgpa\nআমরা কন্ডিশন চেকিং এর যে জায়গাটা গায়েব করে দিলাম সেটা তো কাউকে না কাউকে দেখতে হবে, এখন সেই ক্লাসটা তৈরি করা যাক -\nclass DecisionMakingService:\n    def __init__(self, cgpa_calculation_service, minimum_cgpa, email_service, message_service):\n        self.cgpa_calculation_service = cgpa_calculation_service\n        self.minimum_cgpa = minimum_cgpa\n        self.email_service = email_service\n        self.messaging_service = messaging_service\n\n    def make_decision(self, student_course_gpas):\n        semester_cgpa = cgpa_calculation_service.calculate_semester_cgpa(student_course_gpas)\n\n        if semester_cgpa < self.minimum_cgpa:\n            self.email_service.send_mail(\"আপনার ছেলে/মেয়ে পঁচা\")\n            self.messaging_service.send_message(\"আপনার ছেলে/মেয়ে পঁচা\")\n        return semester_cgpa\nউপরোক্ত DecisionMakingService-এ আরো রিফ্যাক্টরিং করে উন্নতির সুযোগ আছে। তবে সেগুলো অন্য আরেকদিনের জন্য থাকলো।\nSingle Responsibility Principle বুঝতে পারা সব থেকে সহজ অন্য প্রিন্সিপলগুলো থেকে। কিন্তু এই প্রিন্সিপলটাই সবচেয়ে বেশি লঙ্ঘন করে থাকি আমরা।\n\nদ্রষ্টব্যঃ এই লিখায় পাইথন কোডকে অনেকটা সুডোকোডের মতো করে ব্যবহার করা হয়েছে। আর লিখার মূল ফোকাস যেন একটি প্রিন্সিপলেই থাকে সেজন্য বেশকিছু জায়গায় ছাড় দিতে হয়েছে। লিখার কোন ভুল থাকলে জানাবেন এবং মাফ করবেন।\n\n\nReferences\n\nSOLID Principles: Explanation and examples"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jabers-blog-quarto",
    "section": "",
    "text": "Multi-stage Docker Build for Python Application\n\n\n\n\n\n\n\nPython\n\n\nPoetry\n\n\nDocker\n\n\nEnglish\n\n\n\n\nMulti-stage docker build for python application\n\n\n\n\n\n\nJul 16, 2022\n\n\n\n\n\n\n  \n\n\n\n\nDeveloping inside a Container with VSCode\n\n\n\n\n\n\n\nPython\n\n\nVSCode\n\n\nDocker\n\n\nEnglish\n\n\n\n\nInstead of working on virtual environments, we can now use a docker container to work on our codes.\n\n\n\n\n\n\nFeb 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nস্ট্র্যাটিজি প্যাটার্ন (Strategy Pattern)\n\n\n\n\n\n\n\nDesign Pattern\n\n\nPython\n\n\nBangla\n\n\n\n\nStrategy Design Pattern\n\n\n\n\n\n\nJul 3, 2021\n\n\n\n\n\n\n  \n\n\n\n\nপাইথনে প্রি-কমিট হুকের সাথে পরিচিতি(Introduction to Pre-commit Hook in Python)\n\n\n\n\n\n\n\nPre-commit Hook\n\n\nGit\n\n\nPython\n\n\nBangla\n\n\n\n\nPre-commit Hook Configuration\n\n\n\n\n\n\nMar 13, 2021\n\n\n\n\n\n\n  \n\n\n\n\nমেশিন লার্নিং ইন্টার্ভিউ প্রিপারেশন (Machine Learning Interview Preparation)\n\n\n\n\n\n\n\nInterview Preparation\n\n\nMachine Learning\n\n\nBangla\n\n\n\n\nMachine Learning Interview Preparation\n\n\n\n\n\n\nMar 6, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nসিঙ্গেল রেস্পন্সিবিলিটি প্রিন্সিপল (Single Responsibility Principle)\n\n\n\n\n\n\n\nSoftware Design Principle\n\n\nSoftware Engineering\n\n\n\n\nSingle Responsibility Principle\n\n\n\n\n\n\nJun 19, 2020\n\n\n\n\n\n\n  \n\n\n\n\nক্লাসিফিকেশন ইভ্যালুয়েশন মেট্রিসেস(Classification evaluation matrices) [পর্ব - ১]\n\n\n\n\n\n\n\nMachine Learning\n\n\n\n\nClassification evaluation matrices, part-1\n\n\n\n\n\n\nSep 10, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nকম্পিটিটিভ প্রোগ্রামিং -এ আমার পদার্পণ\n\n\n\n\n\n\n\nCompetitive Programming\n\n\nMy Story\n\n\n\n\nHow I started Competitive Programming\n\n\n\n\n\n\nMay 1, 2017\n\n\nMir Mohammad Jaber\n\n\n\n\n\n\nNo matching items"
  }
]